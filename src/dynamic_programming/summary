一维DP
每一步都需要记录多种状态，因为每种状态对后面的决策会有影响。
House Robber I && II
PaintFence
Wiggle Subsequence： 除了DP，还可以用Greedy做。

LIS类型的：
Longest Divisible Subset： 需要保存额外信息。

二维DP
给一个矩阵，求多少种走法，最小最大和之类的。
Unique Paths I && II
Minimum Path Sum
Triangle： top down with memorization/top-down/bottom-up
Maximum Squre: dp[i][j] = Math.min(Math.min(dp[i][j-1], dp[i-1][j-1]),dp[i-1][j]) + 1;
Dungeon Game: 从右下角开始做dp。dp[i][j] = Math.min(Math.max(1,dp[i][j+1] - dungeon[i][j]), Math.max(1, dp[i+1][j] - dungeon[i][j]));

Sequence DP： 有两个以上的sequence。LIS类型的。
Edit Distance
Distinct Subsequence

Math:
Perfect Square: dp[i] = Math.min(dp[i], dp[i-j*j]+1)， BFS也能用。
Coin Change: dp[i] = Integer.min(dp[i], dp[i-coin] + 1);
Perfect Squre， Coin Change同类型。

Palindrome:
Longeset Palindromic Substring
Palindrome Partitioning
